trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  DOCKER_IMAGE_NAME: 'sumedh03/sonarqube:latest'
  DOCKER_IMAGE_TAG: 'latest'
  SONARQUBE_HOST_URL: 'http://sonarqube:9000'
  SONARQUBE_PROJECT_KEY: 'test'
  SONARQUBE_PROJECT_NAME: 'test'
  SONARQUBE_LOGIN: $(SONARQUBE_TOKEN) # Set this as a secret variable in Azure DevOps
  DOCKER_REGISTRY_SERVICE_CONNECTION: 'docker registry' # Docker registry service connection

jobs:
- job: 'BuildAndDeploy'
  displayName: 'Build Docker Image, Deploy SonarQube, and Run Analysis'

  steps:
  - checkout: self

  # Build and Push Docker Image (if needed)
  - task: Docker@2
    inputs:
      containerRegistry: '$(DOCKER_REGISTRY_SERVICE_CONNECTION)'
      repository: '$(DOCKER_IMAGE_NAME)'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile' # Path to Dockerfile
      tags: |
        $(DOCKER_IMAGE_TAG)
    displayName: 'Build and Push Docker Image'

  # Deploy SonarQube and PostgreSQL
  - script: |
      echo "Deploying SonarQube and PostgreSQL..."
      docker run -d --name sonarqube-postgres -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -e POSTGRES_DB=sonarqube postgres:13
      docker run -d --name sonarqube -p 9000:9000 --link sonarqube-postgres:postgres sonarqube:community
    displayName: 'Deploy SonarQube and PostgreSQL Containers'

  # Wait for SonarQube to be Ready
  - script: |
      echo "Waiting for SonarQube to be ready..."
      until curl -s $(SONARQUBE_HOST_URL)/api/system/status | grep "status.*UP"; do
        echo "SonarQube is not ready yet. Waiting..."
        sleep 30
      done
      echo "SonarQube is up and running."
    displayName: 'Wait for SonarQube Deployment'

  # Run SonarQube Scanner
  - script: |
      echo "Running SonarQube Scanner..."
      docker run --rm \
        -e SONAR_HOST_URL=$(SONARQUBE_HOST_URL) \
        -e SONAR_LOGIN=$(SONARQUBE_LOGIN) \
        -v $(System.DefaultWorkingDirectory):/src \
        sonarsource/sonar-scanner-cli \
        -Dsonar.projectKey=$(SONARQUBE_PROJECT_KEY) \
        -Dsonar.projectName=$(SONARQUBE_PROJECT_NAME) \
        -Dsonar.sources=/src
    displayName: 'Run SonarQube Analysis'

  # Fetch SonarQube Logs
  - script: |
      echo "Fetching SonarQube logs..."
      docker logs sonarqube > sonarqube-logs.txt
      cat sonarqube-logs.txt
    displayName: 'Show SonarQube Logs'
