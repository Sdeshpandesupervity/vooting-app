trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONARQUBE_HOST_URL: 'http://localhost:9000' # Adjust if you're using an external SonarQube server
  SONARQUBE_PROJECT_KEY: 'test'
  SONARQUBE_PROJECT_NAME: 'test'
  SONARQUBE_LOGIN: $(SONARQUBE_TOKEN) # Set this as a secret variable in Azure DevOps
  POSTGRES_PASSWORD: 'sonar' # Update if you have a different password
  SONARQUBE_IMAGE: 'sonarqube:community'
  POSTGRES_IMAGE: 'postgres:13'
  
jobs:
- job: 'DeployAndAnalyze'
  displayName: 'Deploy SonarQube, Run Analysis, and Fetch Logs'

  steps:
  - checkout: self

  # Deploy PostgreSQL and SonarQube
  - script: |
      echo "Deploying PostgreSQL container..."
      docker run -d --name sonarqube-postgres \
        -e POSTGRES_USER=sonar \
        -e POSTGRES_PASSWORD=$(POSTGRES_PASSWORD) \
        -e POSTGRES_DB=sonarqube \
        postgres:13

      echo "Deploying SonarQube container..."
      docker run -d --name sonarqube \
        -p 9000:9000 \
        --link sonarqube-postgres:postgres \
        -e SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube \
        -e SONARQUBE_JDBC_USERNAME=sonar \
        -e SONARQUBE_JDBC_PASSWORD=$(POSTGRES_PASSWORD) \
        $(SONARQUBE_IMAGE)
    displayName: 'Deploy PostgreSQL and SonarQube Containers'

  # Wait for SonarQube to be Ready
  - script: |
      echo "Waiting for SonarQube to be ready..."
      until curl -s $(SONARQUBE_HOST_URL)/api/system/status | grep "status.*UP"; do
        echo "SonarQube is not ready yet. Waiting..."
      done
      echo "SonarQube is up and running."
    displayName: 'Wait for SonarQube Deployment'

  # Run SonarQube Scanner
  - script: |
      echo "Running SonarQube Scanner..."
      docker run --rm \
        -e SONAR_HOST_URL=$(SONARQUBE_HOST_URL) \
        -e SONAR_LOGIN=$(SONARQUBE_LOGIN) \
        -v $(System.DefaultWorkingDirectory):/src \
        sonarsource/sonar-scanner-cli \
        -Dsonar.projectKey=$(SONARQUBE_PROJECT_KEY) \
        -Dsonar.projectName=$(SONARQUBE_PROJECT_NAME) \
        -Dsonar.sources=/src
    displayName: 'Run SonarQube Analysis'

  # Fetch SonarQube Logs
  - script: |
      echo "Fetching SonarQube logs..."
      docker logs sonarqube > sonarqube-logs.txt
      cat sonarqube-logs.txt
    displayName: 'Show SonarQube Logs'
