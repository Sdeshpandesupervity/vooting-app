trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONARQUBE_HOST_URL: 'http://localhost:9000'
  SONARQUBE_PROJECT_KEY: 'test'
  SONARQUBE_PROJECT_NAME: 'test'
  SONARQUBE_LOGIN: $(SONARQUBE_TOKEN)
  POSTGRES_PASSWORD: 'sonar'
  SONARQUBE_IMAGE: 'sonarqube:community'
  POSTGRES_IMAGE: 'postgres:13'

jobs:
- job: 'DeployAndAnalyze'
  displayName: 'Deploy SonarQube, Run Analysis, and Fetch Logs'

  steps:
  - checkout: self

  # Deploy PostgreSQL and SonarQube
  - script: |
      echo "Deploying PostgreSQL container..."
      docker run -d --name sonarqube-postgres \
        -e POSTGRES_USER=sonar \
        -e POSTGRES_PASSWORD=$(POSTGRES_PASSWORD) \
        -e POSTGRES_DB=sonarqube \
        $(POSTGRES_IMAGE)

      echo "Deploying SonarQube container..."
      docker run -d --name sonarqube \
        -p 9000:9000 \
        --link sonarqube-postgres:postgres \
        -e SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube \
        -e SONARQUBE_JDBC_USERNAME=sonar \
        -e SONARQUBE_JDBC_PASSWORD=$(POSTGRES_PASSWORD) \
        $(SONARQUBE_IMAGE)
    displayName: 'Deploy PostgreSQL and SonarQube Containers'

  # Wait for SonarQube to be Ready
  - script: |
      echo "Waiting for SonarQube to be ready..."
      timeout=600 # Set a timeout for 10 minutes (600 seconds)
      start_time=$(date +%s)
      while true; do
        status=$(curl -s $(SONARQUBE_HOST_URL)/api/system/status | grep "status.*UP")
        if [ ! -z "$status" ]; then
          echo "SonarQube is up and running."
          break
        fi
        elapsed_time=$(($(date +%s) - start_time))
        if [ $elapsed_time -ge $timeout ]; then
