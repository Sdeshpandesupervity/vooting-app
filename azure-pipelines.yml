trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONARQUBE_PROJECT_KEY: 'test'
  SONARQUBE_PROJECT_NAME: 'test'
  SONARQUBE_PROJECT_VERSION: '1.0'
  SONARQUBE_SERVICE_CONNECTION: 'SonarQube'
  BUILD_SOURCESDIRECTORY: $(Build.SourcesDirectory)

stages:
- stage: SonarQubeAnalysis
  displayName: 'SonarQube Analysis'
  jobs:
  - job: Analyze
    displayName: 'Analyze'
    container: 
      image: sonarqube:latest
    steps:
    - script: |
        echo "Starting SonarQube Analysis"
        /opt/sonarqube/bin/sonar-scanner \
          -Dsonar.projectKey=$(SONARQUBE_PROJECT_KEY) \
          -Dsonar.projectName=$(SONARQUBE_PROJECT_NAME) \
          -Dsonar.projectVersion=$(SONARQUBE_PROJECT_VERSION) \
          -Dsonar.sources=$(Build.SourcesDirectory) \
          -Dsonar.host.url=$(SONARQUBE_SERVICE_CONNECTION)
        echo "SonarQube Analysis Completed"
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: '$(SONARQUBE_SERVICE_CONNECTION)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
        cliProjectName: '$(SONARQUBE_PROJECT_NAME)'
        cliProjectVersion: '$(SONARQUBE_PROJECT_VERSION)'
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
    - script: |
        echo "SonarQube Logs:"
        cat /opt/sonarqube/logs/sonar.log

- stage: Build
  displayName: Image Build
  jobs:
  - job: Build
    displayName: Build and Push the image to ACR
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'cai-yaml-test'
        repository: 'test'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
- stage: Test
  displayName: trivy test
  dependsOn:
  - Build
  condition: succeeded()
  jobs:
  - job: test_with_trivy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'cai-yaml-test'
        command: 'login'
    - task: trivy@1
      inputs:
        version: 'latest'
        loginDockerConfig: true
        image: 'conversationalai.azurecr.io/test:$(Build.BuildId)'
        severities: 'CRITICAL,HIGH'
        exitCode: '0'
